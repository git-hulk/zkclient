!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACL	zookeeper.jute.h	/^struct ACL {$/;"	s
ACL_vector	zookeeper.jute.h	/^struct ACL_vector {$/;"	s
AuthPacket	zookeeper.jute.h	/^struct AuthPacket {$/;"	s
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
CHECK_OPCODE	request.c	/^#define CHECK_OPCODE /;"	d	file:
CLIBS	Makefile	/^CLIBS=$/;"	m
CLOSE_OPCODE	request.c	/^#define CLOSE_OPCODE /;"	d	file:
CREATE_OPCODE	request.c	/^#define CREATE_OPCODE /;"	d	file:
CheckVersionRequest	zookeeper.jute.h	/^struct CheckVersionRequest {$/;"	s
CheckVersionTxn	zookeeper.jute.h	/^struct CheckVersionTxn {$/;"	s
ConnectRequest	zookeeper.jute.h	/^struct ConnectRequest {$/;"	s
ConnectResponse	zookeeper.jute.h	/^struct ConnectResponse {$/;"	s
CreateRequest	zookeeper.jute.h	/^struct CreateRequest {$/;"	s
CreateResponse	zookeeper.jute.h	/^struct CreateResponse {$/;"	s
CreateSessionTxn	zookeeper.jute.h	/^struct CreateSessionTxn {$/;"	s
CreateTxn	zookeeper.jute.h	/^struct CreateTxn {$/;"	s
CreateTxnV0	zookeeper.jute.h	/^struct CreateTxnV0 {$/;"	s
DELETE_OPCODE	request.c	/^#define DELETE_OPCODE /;"	d	file:
DeleteRequest	zookeeper.jute.h	/^struct DeleteRequest {$/;"	s
DeleteTxn	zookeeper.jute.h	/^struct DeleteTxn {$/;"	s
EXISTS_OPCODE	request.c	/^#define EXISTS_OPCODE /;"	d	file:
ErrorResponse	zookeeper.jute.h	/^struct ErrorResponse {$/;"	s
ErrorTxn	zookeeper.jute.h	/^struct ErrorTxn {$/;"	s
ExistsRequest	zookeeper.jute.h	/^struct ExistsRequest {$/;"	s
ExistsResponse	zookeeper.jute.h	/^struct ExistsResponse {$/;"	s
FileHeader	zookeeper.jute.h	/^struct FileHeader {$/;"	s
GETACL_OPCODE	request.c	/^#define GETACL_OPCODE /;"	d	file:
GETCHILDREN2_OPCODE	request.c	/^#define GETCHILDREN2_OPCODE /;"	d	file:
GETCHILDREN_OPCODE	request.c	/^#define GETCHILDREN_OPCODE /;"	d	file:
GETDATA_OPCODE	request.c	/^#define GETDATA_OPCODE /;"	d	file:
GetACLRequest	zookeeper.jute.h	/^struct GetACLRequest {$/;"	s
GetACLResponse	zookeeper.jute.h	/^struct GetACLResponse {$/;"	s
GetChildren2Request	zookeeper.jute.h	/^struct GetChildren2Request {$/;"	s
GetChildren2Response	zookeeper.jute.h	/^struct GetChildren2Response {$/;"	s
GetChildrenRequest	zookeeper.jute.h	/^struct GetChildrenRequest {$/;"	s
GetChildrenResponse	zookeeper.jute.h	/^struct GetChildrenResponse {$/;"	s
GetDataRequest	zookeeper.jute.h	/^struct GetDataRequest {$/;"	s
GetDataResponse	zookeeper.jute.h	/^struct GetDataResponse {$/;"	s
GetMaxChildrenRequest	zookeeper.jute.h	/^struct GetMaxChildrenRequest {$/;"	s
GetMaxChildrenResponse	zookeeper.jute.h	/^struct GetMaxChildrenResponse {$/;"	s
GetSASLRequest	zookeeper.jute.h	/^struct GetSASLRequest {$/;"	s
Id	zookeeper.jute.h	/^struct Id {$/;"	s
Id_vector	zookeeper.jute.h	/^struct Id_vector {$/;"	s
LearnerInfo	zookeeper.jute.h	/^struct LearnerInfo {$/;"	s
MULTI_OPCODE	request.c	/^#define MULTI_OPCODE /;"	d	file:
MultiHeader	zookeeper.jute.h	/^struct MultiHeader {$/;"	s
MultiTxn	zookeeper.jute.h	/^struct MultiTxn {$/;"	s
NOTIFY_OPCODE	request.c	/^#define NOTIFY_OPCODE /;"	d	file:
OBJS	Makefile	/^OBJS= zkclient.o util.o conn.o recordio.o zookeeper.jute.o request.o$/;"	m
PERM_ALL	request.c	/^#define PERM_ALL /;"	d	file:
PING_OPCODE	request.c	/^#define PING_OPCODE /;"	d	file:
PROG	Makefile	/^PROG = zkclient $/;"	m
PROTOCOL_VERSION	request.c	/^#define PROTOCOL_VERSION /;"	d	file:
QuorumPacket	zookeeper.jute.h	/^struct QuorumPacket {$/;"	s
ReplyHeader	zookeeper.jute.h	/^struct ReplyHeader {$/;"	s
RequestHeader	zookeeper.jute.h	/^struct RequestHeader {$/;"	s
SETACL_OPCODE	request.c	/^#define SETACL_OPCODE /;"	d	file:
SETAUTH_OPCODE	request.c	/^#define SETAUTH_OPCODE /;"	d	file:
SETDATA_OPCODE	request.c	/^#define SETDATA_OPCODE /;"	d	file:
SETWATCHES_OPCODE	request.c	/^#define SETWATCHES_OPCODE /;"	d	file:
STRUCT_INITIALIZER	recordio.h	/^#define STRUCT_INITIALIZER(/;"	d
SYNC_OPCODE	request.c	/^#define SYNC_OPCODE /;"	d	file:
SetACLRequest	zookeeper.jute.h	/^struct SetACLRequest {$/;"	s
SetACLResponse	zookeeper.jute.h	/^struct SetACLResponse {$/;"	s
SetACLTxn	zookeeper.jute.h	/^struct SetACLTxn {$/;"	s
SetDataRequest	zookeeper.jute.h	/^struct SetDataRequest {$/;"	s
SetDataResponse	zookeeper.jute.h	/^struct SetDataResponse {$/;"	s
SetDataTxn	zookeeper.jute.h	/^struct SetDataTxn {$/;"	s
SetMaxChildrenRequest	zookeeper.jute.h	/^struct SetMaxChildrenRequest {$/;"	s
SetMaxChildrenTxn	zookeeper.jute.h	/^struct SetMaxChildrenTxn {$/;"	s
SetSASLRequest	zookeeper.jute.h	/^struct SetSASLRequest {$/;"	s
SetSASLResponse	zookeeper.jute.h	/^struct SetSASLResponse {$/;"	s
SetWatches	zookeeper.jute.h	/^struct SetWatches {$/;"	s
Stat	zookeeper.jute.h	/^struct Stat {$/;"	s
StatPersisted	zookeeper.jute.h	/^struct StatPersisted {$/;"	s
StatPersistedV1	zookeeper.jute.h	/^struct StatPersistedV1 {$/;"	s
String_vector	zookeeper.jute.h	/^struct String_vector {$/;"	s
SyncRequest	zookeeper.jute.h	/^struct SyncRequest {$/;"	s
SyncResponse	zookeeper.jute.h	/^struct SyncResponse {$/;"	s
Txn	zookeeper.jute.h	/^struct Txn {$/;"	s
TxnHeader	zookeeper.jute.h	/^struct TxnHeader {$/;"	s
Txn_vector	zookeeper.jute.h	/^struct Txn_vector {$/;"	s
WatcherEvent	zookeeper.jute.h	/^struct WatcherEvent {$/;"	s
ZAPIERROR	zkclient.h	/^  ZAPIERROR = -100,$/;"	e	enum:ZK_ERRORS
ZAUTHFAILED	zkclient.h	/^  ZAUTHFAILED = -115, \/*!< Client authentication failed *\/$/;"	e	enum:ZK_ERRORS
ZBADARGUMENTS	zkclient.h	/^  ZBADARGUMENTS = -8, \/*!< Invalid arguments *\/$/;"	e	enum:ZK_ERRORS
ZBADVERSION	zkclient.h	/^  ZBADVERSION = -103, \/*!< Version conflict *\/$/;"	e	enum:ZK_ERRORS
ZCLOSING	zkclient.h	/^  ZCLOSING = -116, \/*!< ZooKeeper is closing *\/$/;"	e	enum:ZK_ERRORS
ZCONNECTIONLOSS	zkclient.h	/^  ZCONNECTIONLOSS = -4, \/*!< Connection to the server has been lost *\/$/;"	e	enum:ZK_ERRORS
ZDATAINCONSISTENCY	zkclient.h	/^  ZDATAINCONSISTENCY = -3, \/*!< A data inconsistency was found *\/$/;"	e	enum:ZK_ERRORS
ZINVALIDACL	zkclient.h	/^  ZINVALIDACL = -114, \/*!< Invalid ACL specified *\/$/;"	e	enum:ZK_ERRORS
ZINVALIDCALLBACK	zkclient.h	/^  ZINVALIDCALLBACK = -113, \/*!< Invalid callback specified *\/$/;"	e	enum:ZK_ERRORS
ZINVALIDSTATE	zkclient.h	/^  ZINVALIDSTATE = -9, \/*!< Invliad zhandle state *\/$/;"	e	enum:ZK_ERRORS
ZK_ERROR	zkclient.h	/^#define ZK_ERROR /;"	d
ZK_ERRORS	zkclient.h	/^enum ZK_ERRORS {$/;"	g
ZK_OK	zkclient.h	/^#define ZK_OK /;"	d
ZK_STATE_AUTHED	zkclient.h	/^#define ZK_STATE_AUTHED /;"	d
ZK_STATE_CONNECTED	zkclient.h	/^#define ZK_STATE_CONNECTED /;"	d
ZK_STATE_INIT	zkclient.h	/^#define ZK_STATE_INIT /;"	d
ZMARSHALLINGERROR	zkclient.h	/^  ZMARSHALLINGERROR = -5, \/*!< Error while marshalling or unmarshalling data *\/$/;"	e	enum:ZK_ERRORS
ZNOAUTH	zkclient.h	/^  ZNOAUTH = -102, \/*!< Not authenticated *\/$/;"	e	enum:ZK_ERRORS
ZNOCHILDRENFOREPHEMERALS	zkclient.h	/^  ZNOCHILDRENFOREPHEMERALS = -108, \/*!< Ephemeral nodes may not have children *\/$/;"	e	enum:ZK_ERRORS
ZNODEEXISTS	zkclient.h	/^  ZNODEEXISTS = -110, \/*!< The node already exists *\/$/;"	e	enum:ZK_ERRORS
ZNONODE	zkclient.h	/^  ZNONODE = -101, \/*!< Node does not exist *\/$/;"	e	enum:ZK_ERRORS
ZNOTEMPTY	zkclient.h	/^  ZNOTEMPTY = -111, \/*!< The node has children *\/$/;"	e	enum:ZK_ERRORS
ZNOTHING	zkclient.h	/^  ZNOTHING = -117, \/*!< (not error) no server responses to process *\/$/;"	e	enum:ZK_ERRORS
ZOK	zkclient.h	/^  ZOK = 0, \/*!< Everything is OK *\/$/;"	e	enum:ZK_ERRORS
ZOPERATIONTIMEOUT	zkclient.h	/^  ZOPERATIONTIMEOUT = -7, \/*!< Operation timeout *\/$/;"	e	enum:ZK_ERRORS
ZRUNTIMEINCONSISTENCY	zkclient.h	/^  ZRUNTIMEINCONSISTENCY = -2, \/*!< A runtime inconsistency was found *\/$/;"	e	enum:ZK_ERRORS
ZSESSIONEXPIRED	zkclient.h	/^  ZSESSIONEXPIRED = -112, \/*!< The session has been expired by the server *\/$/;"	e	enum:ZK_ERRORS
ZSESSIONMOVED	zkclient.h	/^  ZSESSIONMOVED = -118 \/*!<session moved to another server, so operation is ignored *\/$/;"	e	enum:ZK_ERRORS
ZSYSTEMERROR	zkclient.h	/^  ZSYSTEMERROR = -1,$/;"	e	enum:ZK_ERRORS
ZUNIMPLEMENTED	zkclient.h	/^  ZUNIMPLEMENTED = -6, \/*!< Operation is unimplemented *\/$/;"	e	enum:ZK_ERRORS
__CONN_H_	conn.h	/^#define __CONN_H_$/;"	d
__RECORDIO_H__	recordio.h	/^#define __RECORDIO_H__$/;"	d
__REQUEST_H_	request.h	/^#define __REQUEST_H_$/;"	d
__UTIL_H_	util.h	/^#define __UTIL_H_$/;"	d
__ZKCLIENT_H_	zkclient.h	/^#define __ZKCLIENT_H_$/;"	d
__ZOOKEEPER_JUTE__	zookeeper.jute.h	/^#define __ZOOKEEPER_JUTE__$/;"	d
_zk_client	zkclient.h	/^struct _zk_client {$/;"	s
acl	zookeeper.jute.h	/^    struct ACL_vector acl;$/;"	m	struct:CreateRequest	typeref:struct:CreateRequest::ACL_vector
acl	zookeeper.jute.h	/^    struct ACL_vector acl;$/;"	m	struct:CreateTxn	typeref:struct:CreateTxn::ACL_vector
acl	zookeeper.jute.h	/^    struct ACL_vector acl;$/;"	m	struct:CreateTxnV0	typeref:struct:CreateTxnV0::ACL_vector
acl	zookeeper.jute.h	/^    struct ACL_vector acl;$/;"	m	struct:GetACLResponse	typeref:struct:GetACLResponse::ACL_vector
acl	zookeeper.jute.h	/^    struct ACL_vector acl;$/;"	m	struct:SetACLRequest	typeref:struct:SetACLRequest::ACL_vector
acl	zookeeper.jute.h	/^    struct ACL_vector acl;$/;"	m	struct:SetACLTxn	typeref:struct:SetACLTxn::ACL_vector
acls	request.c	/^struct ACL acls[] = {$/;"	v	typeref:struct:ACL
add_request_header	request.c	/^static int add_request_header(struct oarchive *oa, int opcode) {$/;"	f	file:
allocate_ACL_vector	zookeeper.jute.c	/^int allocate_ACL_vector(struct ACL_vector *v, int32_t len) {$/;"	f
allocate_Id_vector	zookeeper.jute.c	/^int allocate_Id_vector(struct Id_vector *v, int32_t len) {$/;"	f
allocate_String_vector	zookeeper.jute.c	/^int allocate_String_vector(struct String_vector *v, int32_t len) {$/;"	f
allocate_Txn_vector	zookeeper.jute.c	/^int allocate_Txn_vector(struct Txn_vector *v, int32_t len) {$/;"	f
atomic_inc	util.c	/^int32_t atomic_inc(volatile int32_t* operand, int incr) {$/;"	f
auth	zookeeper.jute.h	/^    struct buffer auth;$/;"	m	struct:AuthPacket	typeref:struct:AuthPacket::buffer
authenticate	request.c	/^int authenticate(zk_client *c) {$/;"	f
authinfo	zookeeper.jute.h	/^    struct Id_vector authinfo;$/;"	m	struct:QuorumPacket	typeref:struct:QuorumPacket::Id_vector
aversion	zookeeper.jute.h	/^    int32_t aversion;$/;"	m	struct:Stat
aversion	zookeeper.jute.h	/^    int32_t aversion;$/;"	m	struct:StatPersisted
aversion	zookeeper.jute.h	/^    int32_t aversion;$/;"	m	struct:StatPersistedV1
buff	recordio.h	/^    char *buff;$/;"	m	struct:buffer
buff_struct	recordio.c	/^struct buff_struct {$/;"	s	file:
buffer	recordio.c	/^    char *buffer;$/;"	m	struct:buff_struct	file:
buffer	recordio.h	/^struct buffer {$/;"	s
childWatches	zookeeper.jute.h	/^    struct String_vector childWatches;$/;"	m	struct:SetWatches	typeref:struct:SetWatches::String_vector
children	zookeeper.jute.h	/^    struct String_vector children;$/;"	m	struct:GetChildren2Response	typeref:struct:GetChildren2Response::String_vector
children	zookeeper.jute.h	/^    struct String_vector children;$/;"	m	struct:GetChildrenResponse	typeref:struct:GetChildrenResponse::String_vector
clientId	zookeeper.jute.h	/^    int64_t clientId;$/;"	m	struct:TxnHeader
close_buffer_iarchive	recordio.c	/^void close_buffer_iarchive(struct iarchive **ia)$/;"	f
close_buffer_oarchive	recordio.c	/^void close_buffer_oarchive(struct oarchive **oa, int free_buffer)$/;"	f
connect_server	conn.c	/^int connect_server(const char *host, int port, int timeout) {$/;"	f
connect_timeout	zkclient.h	/^    int connect_timeout;$/;"	m	struct:_zk_client
count	zookeeper.jute.h	/^    int32_t count;$/;"	m	struct:ACL_vector
count	zookeeper.jute.h	/^    int32_t count;$/;"	m	struct:Id_vector
count	zookeeper.jute.h	/^    int32_t count;$/;"	m	struct:String_vector
count	zookeeper.jute.h	/^    int32_t count;$/;"	m	struct:Txn_vector
create_buffer_iarchive	recordio.c	/^struct iarchive *create_buffer_iarchive(char *buffer, int len)$/;"	f
create_buffer_oarchive	recordio.c	/^struct oarchive *create_buffer_oarchive()$/;"	f
ctime	zookeeper.jute.h	/^    int64_t ctime;$/;"	m	struct:Stat
ctime	zookeeper.jute.h	/^    int64_t ctime;$/;"	m	struct:StatPersisted
ctime	zookeeper.jute.h	/^    int64_t ctime;$/;"	m	struct:StatPersistedV1
cversion	zookeeper.jute.h	/^    int32_t cversion;$/;"	m	struct:Stat
cversion	zookeeper.jute.h	/^    int32_t cversion;$/;"	m	struct:StatPersisted
cversion	zookeeper.jute.h	/^    int32_t cversion;$/;"	m	struct:StatPersistedV1
cxid	zookeeper.jute.h	/^    int32_t cxid;$/;"	m	struct:TxnHeader
czxid	zookeeper.jute.h	/^    int64_t czxid;$/;"	m	struct:Stat
czxid	zookeeper.jute.h	/^    int64_t czxid;$/;"	m	struct:StatPersisted
czxid	zookeeper.jute.h	/^    int64_t czxid;$/;"	m	struct:StatPersistedV1
data	zookeeper.jute.h	/^    char * *data;$/;"	m	struct:String_vector
data	zookeeper.jute.h	/^    struct ACL *data;$/;"	m	struct:ACL_vector	typeref:struct:ACL_vector::ACL
data	zookeeper.jute.h	/^    struct Id *data;$/;"	m	struct:Id_vector	typeref:struct:Id_vector::Id
data	zookeeper.jute.h	/^    struct Txn *data;$/;"	m	struct:Txn_vector	typeref:struct:Txn_vector::Txn
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:CreateRequest	typeref:struct:CreateRequest::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:CreateTxn	typeref:struct:CreateTxn::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:CreateTxnV0	typeref:struct:CreateTxnV0::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:GetDataResponse	typeref:struct:GetDataResponse::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:QuorumPacket	typeref:struct:QuorumPacket::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:SetDataRequest	typeref:struct:SetDataRequest::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:SetDataTxn	typeref:struct:SetDataTxn::buffer
data	zookeeper.jute.h	/^    struct buffer data;$/;"	m	struct:Txn	typeref:struct:Txn::buffer
dataLength	zookeeper.jute.h	/^    int32_t dataLength;$/;"	m	struct:Stat
dataWatches	zookeeper.jute.h	/^    struct String_vector dataWatches;$/;"	m	struct:SetWatches	typeref:struct:SetWatches::String_vector
dbid	zookeeper.jute.h	/^    int64_t dbid;$/;"	m	struct:FileHeader
deallocate_ACL	zookeeper.jute.c	/^void deallocate_ACL(struct ACL*v){$/;"	f
deallocate_ACL_vector	zookeeper.jute.c	/^int deallocate_ACL_vector(struct ACL_vector *v) {$/;"	f
deallocate_AuthPacket	zookeeper.jute.c	/^void deallocate_AuthPacket(struct AuthPacket*v){$/;"	f
deallocate_Buffer	recordio.c	/^void deallocate_Buffer(struct buffer *b)$/;"	f
deallocate_CheckVersionRequest	zookeeper.jute.c	/^void deallocate_CheckVersionRequest(struct CheckVersionRequest*v){$/;"	f
deallocate_CheckVersionTxn	zookeeper.jute.c	/^void deallocate_CheckVersionTxn(struct CheckVersionTxn*v){$/;"	f
deallocate_ConnectRequest	zookeeper.jute.c	/^void deallocate_ConnectRequest(struct ConnectRequest*v){$/;"	f
deallocate_ConnectResponse	zookeeper.jute.c	/^void deallocate_ConnectResponse(struct ConnectResponse*v){$/;"	f
deallocate_CreateRequest	zookeeper.jute.c	/^void deallocate_CreateRequest(struct CreateRequest*v){$/;"	f
deallocate_CreateResponse	zookeeper.jute.c	/^void deallocate_CreateResponse(struct CreateResponse*v){$/;"	f
deallocate_CreateSessionTxn	zookeeper.jute.c	/^void deallocate_CreateSessionTxn(struct CreateSessionTxn*v){$/;"	f
deallocate_CreateTxn	zookeeper.jute.c	/^void deallocate_CreateTxn(struct CreateTxn*v){$/;"	f
deallocate_CreateTxnV0	zookeeper.jute.c	/^void deallocate_CreateTxnV0(struct CreateTxnV0*v){$/;"	f
deallocate_DeleteRequest	zookeeper.jute.c	/^void deallocate_DeleteRequest(struct DeleteRequest*v){$/;"	f
deallocate_DeleteTxn	zookeeper.jute.c	/^void deallocate_DeleteTxn(struct DeleteTxn*v){$/;"	f
deallocate_ErrorResponse	zookeeper.jute.c	/^void deallocate_ErrorResponse(struct ErrorResponse*v){$/;"	f
deallocate_ErrorTxn	zookeeper.jute.c	/^void deallocate_ErrorTxn(struct ErrorTxn*v){$/;"	f
deallocate_ExistsRequest	zookeeper.jute.c	/^void deallocate_ExistsRequest(struct ExistsRequest*v){$/;"	f
deallocate_ExistsResponse	zookeeper.jute.c	/^void deallocate_ExistsResponse(struct ExistsResponse*v){$/;"	f
deallocate_FileHeader	zookeeper.jute.c	/^void deallocate_FileHeader(struct FileHeader*v){$/;"	f
deallocate_GetACLRequest	zookeeper.jute.c	/^void deallocate_GetACLRequest(struct GetACLRequest*v){$/;"	f
deallocate_GetACLResponse	zookeeper.jute.c	/^void deallocate_GetACLResponse(struct GetACLResponse*v){$/;"	f
deallocate_GetChildren2Request	zookeeper.jute.c	/^void deallocate_GetChildren2Request(struct GetChildren2Request*v){$/;"	f
deallocate_GetChildren2Response	zookeeper.jute.c	/^void deallocate_GetChildren2Response(struct GetChildren2Response*v){$/;"	f
deallocate_GetChildrenRequest	zookeeper.jute.c	/^void deallocate_GetChildrenRequest(struct GetChildrenRequest*v){$/;"	f
deallocate_GetChildrenResponse	zookeeper.jute.c	/^void deallocate_GetChildrenResponse(struct GetChildrenResponse*v){$/;"	f
deallocate_GetDataRequest	zookeeper.jute.c	/^void deallocate_GetDataRequest(struct GetDataRequest*v){$/;"	f
deallocate_GetDataResponse	zookeeper.jute.c	/^void deallocate_GetDataResponse(struct GetDataResponse*v){$/;"	f
deallocate_GetMaxChildrenRequest	zookeeper.jute.c	/^void deallocate_GetMaxChildrenRequest(struct GetMaxChildrenRequest*v){$/;"	f
deallocate_GetMaxChildrenResponse	zookeeper.jute.c	/^void deallocate_GetMaxChildrenResponse(struct GetMaxChildrenResponse*v){$/;"	f
deallocate_GetSASLRequest	zookeeper.jute.c	/^void deallocate_GetSASLRequest(struct GetSASLRequest*v){$/;"	f
deallocate_Id	zookeeper.jute.c	/^void deallocate_Id(struct Id*v){$/;"	f
deallocate_Id_vector	zookeeper.jute.c	/^int deallocate_Id_vector(struct Id_vector *v) {$/;"	f
deallocate_LearnerInfo	zookeeper.jute.c	/^void deallocate_LearnerInfo(struct LearnerInfo*v){$/;"	f
deallocate_MultiHeader	zookeeper.jute.c	/^void deallocate_MultiHeader(struct MultiHeader*v){$/;"	f
deallocate_MultiTxn	zookeeper.jute.c	/^void deallocate_MultiTxn(struct MultiTxn*v){$/;"	f
deallocate_QuorumPacket	zookeeper.jute.c	/^void deallocate_QuorumPacket(struct QuorumPacket*v){$/;"	f
deallocate_ReplyHeader	zookeeper.jute.c	/^void deallocate_ReplyHeader(struct ReplyHeader*v){$/;"	f
deallocate_RequestHeader	zookeeper.jute.c	/^void deallocate_RequestHeader(struct RequestHeader*v){$/;"	f
deallocate_SetACLRequest	zookeeper.jute.c	/^void deallocate_SetACLRequest(struct SetACLRequest*v){$/;"	f
deallocate_SetACLResponse	zookeeper.jute.c	/^void deallocate_SetACLResponse(struct SetACLResponse*v){$/;"	f
deallocate_SetACLTxn	zookeeper.jute.c	/^void deallocate_SetACLTxn(struct SetACLTxn*v){$/;"	f
deallocate_SetDataRequest	zookeeper.jute.c	/^void deallocate_SetDataRequest(struct SetDataRequest*v){$/;"	f
deallocate_SetDataResponse	zookeeper.jute.c	/^void deallocate_SetDataResponse(struct SetDataResponse*v){$/;"	f
deallocate_SetDataTxn	zookeeper.jute.c	/^void deallocate_SetDataTxn(struct SetDataTxn*v){$/;"	f
deallocate_SetMaxChildrenRequest	zookeeper.jute.c	/^void deallocate_SetMaxChildrenRequest(struct SetMaxChildrenRequest*v){$/;"	f
deallocate_SetMaxChildrenTxn	zookeeper.jute.c	/^void deallocate_SetMaxChildrenTxn(struct SetMaxChildrenTxn*v){$/;"	f
deallocate_SetSASLRequest	zookeeper.jute.c	/^void deallocate_SetSASLRequest(struct SetSASLRequest*v){$/;"	f
deallocate_SetSASLResponse	zookeeper.jute.c	/^void deallocate_SetSASLResponse(struct SetSASLResponse*v){$/;"	f
deallocate_SetWatches	zookeeper.jute.c	/^void deallocate_SetWatches(struct SetWatches*v){$/;"	f
deallocate_Stat	zookeeper.jute.c	/^void deallocate_Stat(struct Stat*v){$/;"	f
deallocate_StatPersisted	zookeeper.jute.c	/^void deallocate_StatPersisted(struct StatPersisted*v){$/;"	f
deallocate_StatPersistedV1	zookeeper.jute.c	/^void deallocate_StatPersistedV1(struct StatPersistedV1*v){$/;"	f
deallocate_String	recordio.c	/^void deallocate_String(char **s)$/;"	f
deallocate_String_vector	zookeeper.jute.c	/^int deallocate_String_vector(struct String_vector *v) {$/;"	f
deallocate_SyncRequest	zookeeper.jute.c	/^void deallocate_SyncRequest(struct SyncRequest*v){$/;"	f
deallocate_SyncResponse	zookeeper.jute.c	/^void deallocate_SyncResponse(struct SyncResponse*v){$/;"	f
deallocate_Txn	zookeeper.jute.c	/^void deallocate_Txn(struct Txn*v){$/;"	f
deallocate_TxnHeader	zookeeper.jute.c	/^void deallocate_TxnHeader(struct TxnHeader*v){$/;"	f
deallocate_Txn_vector	zookeeper.jute.c	/^int deallocate_Txn_vector(struct Txn_vector *v) {$/;"	f
deallocate_WatcherEvent	zookeeper.jute.c	/^void deallocate_WatcherEvent(struct WatcherEvent*v){$/;"	f
decode_int32	request.c	/^static int32_t decode_int32(char *buf, int off) {$/;"	f	file:
decode_reply_header	request.c	/^static int32_t decode_reply_header(struct iarchive *ia) {$/;"	f	file:
default_acl	request.c	/^struct ACL_vector default_acl = {1, acls};$/;"	v	typeref:struct:ACL_vector
deserialize_ACL	zookeeper.jute.c	/^int deserialize_ACL(struct iarchive *in, const char *tag, struct ACL*v){$/;"	f
deserialize_ACL_vector	zookeeper.jute.c	/^int deserialize_ACL_vector(struct iarchive *in, const char *tag, struct ACL_vector *v)$/;"	f
deserialize_AuthPacket	zookeeper.jute.c	/^int deserialize_AuthPacket(struct iarchive *in, const char *tag, struct AuthPacket*v){$/;"	f
deserialize_Bool	recordio.h	/^    int (*deserialize_Bool)(struct iarchive *ia, const char *name, int32_t *);$/;"	m	struct:iarchive
deserialize_Buffer	recordio.h	/^    int (*deserialize_Buffer)(struct iarchive *ia, const char *name,$/;"	m	struct:iarchive
deserialize_CheckVersionRequest	zookeeper.jute.c	/^int deserialize_CheckVersionRequest(struct iarchive *in, const char *tag, struct CheckVersionRequest*v){$/;"	f
deserialize_CheckVersionTxn	zookeeper.jute.c	/^int deserialize_CheckVersionTxn(struct iarchive *in, const char *tag, struct CheckVersionTxn*v){$/;"	f
deserialize_ConnectRequest	zookeeper.jute.c	/^int deserialize_ConnectRequest(struct iarchive *in, const char *tag, struct ConnectRequest*v){$/;"	f
deserialize_ConnectResponse	zookeeper.jute.c	/^int deserialize_ConnectResponse(struct iarchive *in, const char *tag, struct ConnectResponse*v){$/;"	f
deserialize_CreateRequest	zookeeper.jute.c	/^int deserialize_CreateRequest(struct iarchive *in, const char *tag, struct CreateRequest*v){$/;"	f
deserialize_CreateResponse	zookeeper.jute.c	/^int deserialize_CreateResponse(struct iarchive *in, const char *tag, struct CreateResponse*v){$/;"	f
deserialize_CreateSessionTxn	zookeeper.jute.c	/^int deserialize_CreateSessionTxn(struct iarchive *in, const char *tag, struct CreateSessionTxn*v){$/;"	f
deserialize_CreateTxn	zookeeper.jute.c	/^int deserialize_CreateTxn(struct iarchive *in, const char *tag, struct CreateTxn*v){$/;"	f
deserialize_CreateTxnV0	zookeeper.jute.c	/^int deserialize_CreateTxnV0(struct iarchive *in, const char *tag, struct CreateTxnV0*v){$/;"	f
deserialize_DeleteRequest	zookeeper.jute.c	/^int deserialize_DeleteRequest(struct iarchive *in, const char *tag, struct DeleteRequest*v){$/;"	f
deserialize_DeleteTxn	zookeeper.jute.c	/^int deserialize_DeleteTxn(struct iarchive *in, const char *tag, struct DeleteTxn*v){$/;"	f
deserialize_ErrorResponse	zookeeper.jute.c	/^int deserialize_ErrorResponse(struct iarchive *in, const char *tag, struct ErrorResponse*v){$/;"	f
deserialize_ErrorTxn	zookeeper.jute.c	/^int deserialize_ErrorTxn(struct iarchive *in, const char *tag, struct ErrorTxn*v){$/;"	f
deserialize_ExistsRequest	zookeeper.jute.c	/^int deserialize_ExistsRequest(struct iarchive *in, const char *tag, struct ExistsRequest*v){$/;"	f
deserialize_ExistsResponse	zookeeper.jute.c	/^int deserialize_ExistsResponse(struct iarchive *in, const char *tag, struct ExistsResponse*v){$/;"	f
deserialize_FileHeader	zookeeper.jute.c	/^int deserialize_FileHeader(struct iarchive *in, const char *tag, struct FileHeader*v){$/;"	f
deserialize_GetACLRequest	zookeeper.jute.c	/^int deserialize_GetACLRequest(struct iarchive *in, const char *tag, struct GetACLRequest*v){$/;"	f
deserialize_GetACLResponse	zookeeper.jute.c	/^int deserialize_GetACLResponse(struct iarchive *in, const char *tag, struct GetACLResponse*v){$/;"	f
deserialize_GetChildren2Request	zookeeper.jute.c	/^int deserialize_GetChildren2Request(struct iarchive *in, const char *tag, struct GetChildren2Request*v){$/;"	f
deserialize_GetChildren2Response	zookeeper.jute.c	/^int deserialize_GetChildren2Response(struct iarchive *in, const char *tag, struct GetChildren2Response*v){$/;"	f
deserialize_GetChildrenRequest	zookeeper.jute.c	/^int deserialize_GetChildrenRequest(struct iarchive *in, const char *tag, struct GetChildrenRequest*v){$/;"	f
deserialize_GetChildrenResponse	zookeeper.jute.c	/^int deserialize_GetChildrenResponse(struct iarchive *in, const char *tag, struct GetChildrenResponse*v){$/;"	f
deserialize_GetDataRequest	zookeeper.jute.c	/^int deserialize_GetDataRequest(struct iarchive *in, const char *tag, struct GetDataRequest*v){$/;"	f
deserialize_GetDataResponse	zookeeper.jute.c	/^int deserialize_GetDataResponse(struct iarchive *in, const char *tag, struct GetDataResponse*v){$/;"	f
deserialize_GetMaxChildrenRequest	zookeeper.jute.c	/^int deserialize_GetMaxChildrenRequest(struct iarchive *in, const char *tag, struct GetMaxChildrenRequest*v){$/;"	f
deserialize_GetMaxChildrenResponse	zookeeper.jute.c	/^int deserialize_GetMaxChildrenResponse(struct iarchive *in, const char *tag, struct GetMaxChildrenResponse*v){$/;"	f
deserialize_GetSASLRequest	zookeeper.jute.c	/^int deserialize_GetSASLRequest(struct iarchive *in, const char *tag, struct GetSASLRequest*v){$/;"	f
deserialize_Id	zookeeper.jute.c	/^int deserialize_Id(struct iarchive *in, const char *tag, struct Id*v){$/;"	f
deserialize_Id_vector	zookeeper.jute.c	/^int deserialize_Id_vector(struct iarchive *in, const char *tag, struct Id_vector *v)$/;"	f
deserialize_Int	recordio.h	/^    int (*deserialize_Int)(struct iarchive *ia, const char *name, int32_t *);$/;"	m	struct:iarchive
deserialize_LearnerInfo	zookeeper.jute.c	/^int deserialize_LearnerInfo(struct iarchive *in, const char *tag, struct LearnerInfo*v){$/;"	f
deserialize_Long	recordio.h	/^    int (*deserialize_Long)(struct iarchive *ia, const char *name, int64_t *);$/;"	m	struct:iarchive
deserialize_MultiHeader	zookeeper.jute.c	/^int deserialize_MultiHeader(struct iarchive *in, const char *tag, struct MultiHeader*v){$/;"	f
deserialize_MultiTxn	zookeeper.jute.c	/^int deserialize_MultiTxn(struct iarchive *in, const char *tag, struct MultiTxn*v){$/;"	f
deserialize_QuorumPacket	zookeeper.jute.c	/^int deserialize_QuorumPacket(struct iarchive *in, const char *tag, struct QuorumPacket*v){$/;"	f
deserialize_ReplyHeader	zookeeper.jute.c	/^int deserialize_ReplyHeader(struct iarchive *in, const char *tag, struct ReplyHeader*v){$/;"	f
deserialize_RequestHeader	zookeeper.jute.c	/^int deserialize_RequestHeader(struct iarchive *in, const char *tag, struct RequestHeader*v){$/;"	f
deserialize_SetACLRequest	zookeeper.jute.c	/^int deserialize_SetACLRequest(struct iarchive *in, const char *tag, struct SetACLRequest*v){$/;"	f
deserialize_SetACLResponse	zookeeper.jute.c	/^int deserialize_SetACLResponse(struct iarchive *in, const char *tag, struct SetACLResponse*v){$/;"	f
deserialize_SetACLTxn	zookeeper.jute.c	/^int deserialize_SetACLTxn(struct iarchive *in, const char *tag, struct SetACLTxn*v){$/;"	f
deserialize_SetDataRequest	zookeeper.jute.c	/^int deserialize_SetDataRequest(struct iarchive *in, const char *tag, struct SetDataRequest*v){$/;"	f
deserialize_SetDataResponse	zookeeper.jute.c	/^int deserialize_SetDataResponse(struct iarchive *in, const char *tag, struct SetDataResponse*v){$/;"	f
deserialize_SetDataTxn	zookeeper.jute.c	/^int deserialize_SetDataTxn(struct iarchive *in, const char *tag, struct SetDataTxn*v){$/;"	f
deserialize_SetMaxChildrenRequest	zookeeper.jute.c	/^int deserialize_SetMaxChildrenRequest(struct iarchive *in, const char *tag, struct SetMaxChildrenRequest*v){$/;"	f
deserialize_SetMaxChildrenTxn	zookeeper.jute.c	/^int deserialize_SetMaxChildrenTxn(struct iarchive *in, const char *tag, struct SetMaxChildrenTxn*v){$/;"	f
deserialize_SetSASLRequest	zookeeper.jute.c	/^int deserialize_SetSASLRequest(struct iarchive *in, const char *tag, struct SetSASLRequest*v){$/;"	f
deserialize_SetSASLResponse	zookeeper.jute.c	/^int deserialize_SetSASLResponse(struct iarchive *in, const char *tag, struct SetSASLResponse*v){$/;"	f
deserialize_SetWatches	zookeeper.jute.c	/^int deserialize_SetWatches(struct iarchive *in, const char *tag, struct SetWatches*v){$/;"	f
deserialize_Stat	zookeeper.jute.c	/^int deserialize_Stat(struct iarchive *in, const char *tag, struct Stat*v){$/;"	f
deserialize_StatPersisted	zookeeper.jute.c	/^int deserialize_StatPersisted(struct iarchive *in, const char *tag, struct StatPersisted*v){$/;"	f
deserialize_StatPersistedV1	zookeeper.jute.c	/^int deserialize_StatPersistedV1(struct iarchive *in, const char *tag, struct StatPersistedV1*v){$/;"	f
deserialize_String	recordio.h	/^    int (*deserialize_String)(struct iarchive *ia, const char *name, char **);$/;"	m	struct:iarchive
deserialize_String_vector	zookeeper.jute.c	/^int deserialize_String_vector(struct iarchive *in, const char *tag, struct String_vector *v)$/;"	f
deserialize_SyncRequest	zookeeper.jute.c	/^int deserialize_SyncRequest(struct iarchive *in, const char *tag, struct SyncRequest*v){$/;"	f
deserialize_SyncResponse	zookeeper.jute.c	/^int deserialize_SyncResponse(struct iarchive *in, const char *tag, struct SyncResponse*v){$/;"	f
deserialize_Txn	zookeeper.jute.c	/^int deserialize_Txn(struct iarchive *in, const char *tag, struct Txn*v){$/;"	f
deserialize_TxnHeader	zookeeper.jute.c	/^int deserialize_TxnHeader(struct iarchive *in, const char *tag, struct TxnHeader*v){$/;"	f
deserialize_Txn_vector	zookeeper.jute.c	/^int deserialize_Txn_vector(struct iarchive *in, const char *tag, struct Txn_vector *v)$/;"	f
deserialize_WatcherEvent	zookeeper.jute.c	/^int deserialize_WatcherEvent(struct iarchive *in, const char *tag, struct WatcherEvent*v){$/;"	f
destory_archive	request.c	/^static void destory_archive(struct oarchive *oa, struct iarchive *ia) {$/;"	f	file:
destroy_client	zkclient.c	/^void destroy_client(zk_client *c) {$/;"	f
do_connect	zkclient.c	/^int do_connect(zk_client *c) {$/;"	f
do_header_request	request.c	/^static int do_header_request(zk_client *c, int opcode) {$/;"	f	file:
done	zookeeper.jute.h	/^    int32_t done;$/;"	m	struct:MultiHeader
end_record	recordio.h	/^    int (*end_record)(struct iarchive *ia, const char *tag);$/;"	m	struct:iarchive
end_record	recordio.h	/^    int (*end_record)(struct oarchive *oa, const char *tag);$/;"	m	struct:oarchive
end_vector	recordio.h	/^    int (*end_vector)(struct iarchive *ia, const char *tag);$/;"	m	struct:iarchive
end_vector	recordio.h	/^    int (*end_vector)(struct oarchive *oa, const char *tag);$/;"	m	struct:oarchive
ephemeral	zookeeper.jute.h	/^    int32_t ephemeral;$/;"	m	struct:CreateTxn
ephemeral	zookeeper.jute.h	/^    int32_t ephemeral;$/;"	m	struct:CreateTxnV0
ephemeralOwner	zookeeper.jute.h	/^    int64_t ephemeralOwner;$/;"	m	struct:Stat
ephemeralOwner	zookeeper.jute.h	/^    int64_t ephemeralOwner;$/;"	m	struct:StatPersisted
ephemeralOwner	zookeeper.jute.h	/^    int64_t ephemeralOwner;$/;"	m	struct:StatPersistedV1
err	zookeeper.jute.h	/^    int32_t err;$/;"	m	struct:ErrorResponse
err	zookeeper.jute.h	/^    int32_t err;$/;"	m	struct:ErrorTxn
err	zookeeper.jute.h	/^    int32_t err;$/;"	m	struct:MultiHeader
err	zookeeper.jute.h	/^    int32_t err;$/;"	m	struct:ReplyHeader
existWatches	zookeeper.jute.h	/^    struct String_vector existWatches;$/;"	m	struct:SetWatches	typeref:struct:SetWatches::String_vector
flags	zookeeper.jute.h	/^    int32_t flags;$/;"	m	struct:CreateRequest
get_buffer	recordio.c	/^char *get_buffer(struct oarchive *oa)$/;"	f
get_buffer_len	recordio.c	/^int get_buffer_len(struct oarchive *oa)$/;"	f
get_xid	util.c	/^__attribute__((constructor)) int32_t get_xid() {$/;"	f
host	zkclient.h	/^    char *host;$/;"	m	struct:_zk_client
htonll	recordio.c	/^int64_t htonll(int64_t v)$/;"	f
ia_default	recordio.c	/^static struct iarchive ia_default = { STRUCT_INITIALIZER (start_record ,ia_start_record),$/;"	v	typeref:struct:iarchive	file:
ia_deserialize_bool	recordio.c	/^int ia_deserialize_bool(struct iarchive *ia, const char *name, int32_t *v)$/;"	f
ia_deserialize_buffer	recordio.c	/^int ia_deserialize_buffer(struct iarchive *ia, const char *name,$/;"	f
ia_deserialize_int	recordio.c	/^int ia_deserialize_int(struct iarchive *ia, const char *tag, int32_t *count)$/;"	f
ia_deserialize_long	recordio.c	/^int ia_deserialize_long(struct iarchive *ia, const char *tag, int64_t *count)$/;"	f
ia_deserialize_string	recordio.c	/^int ia_deserialize_string(struct iarchive *ia, const char *name, char **s)$/;"	f
ia_end_record	recordio.c	/^int ia_end_record(struct iarchive *ia, const char *tag)$/;"	f
ia_end_vector	recordio.c	/^int ia_end_vector(struct iarchive *ia, const char *tag)$/;"	f
ia_start_record	recordio.c	/^int ia_start_record(struct iarchive *ia, const char *tag)$/;"	f
ia_start_vector	recordio.c	/^int ia_start_vector(struct iarchive *ia, const char *tag, int32_t *count)$/;"	f
iarchive	recordio.h	/^struct iarchive {$/;"	s
id	zookeeper.jute.h	/^    char * id;$/;"	m	struct:Id
id	zookeeper.jute.h	/^    struct Id id;$/;"	m	struct:ACL	typeref:struct:ACL::Id
lastZxidSeen	zookeeper.jute.h	/^    int64_t lastZxidSeen;$/;"	m	struct:ConnectRequest
last_err	zkclient.h	/^    int32_t last_err;$/;"	m	struct:_zk_client
last_zxid	zkclient.h	/^    int last_zxid;$/;"	m	struct:_zk_client
len	recordio.c	/^    int32_t len;$/;"	m	struct:buff_struct	file:
len	recordio.h	/^    int32_t len;$/;"	m	struct:buffer
magic	zookeeper.jute.h	/^    int32_t magic;$/;"	m	struct:FileHeader
main	zkclient.c	/^int main(int argc, char **argv) {$/;"	f
max	zookeeper.jute.h	/^    int32_t max;$/;"	m	struct:GetMaxChildrenResponse
max	zookeeper.jute.h	/^    int32_t max;$/;"	m	struct:SetMaxChildrenRequest
max	zookeeper.jute.h	/^    int32_t max;$/;"	m	struct:SetMaxChildrenTxn
mtime	zookeeper.jute.h	/^    int64_t mtime;$/;"	m	struct:Stat
mtime	zookeeper.jute.h	/^    int64_t mtime;$/;"	m	struct:StatPersisted
mtime	zookeeper.jute.h	/^    int64_t mtime;$/;"	m	struct:StatPersistedV1
mzxid	zookeeper.jute.h	/^    int64_t mzxid;$/;"	m	struct:Stat
mzxid	zookeeper.jute.h	/^    int64_t mzxid;$/;"	m	struct:StatPersisted
mzxid	zookeeper.jute.h	/^    int64_t mzxid;$/;"	m	struct:StatPersistedV1
negone	recordio.c	/^static const int32_t negone = -1;$/;"	v	file:
new_client	zkclient.c	/^zk_client *new_client(const char *host, int port, int session_timeout) {$/;"	f
numChildren	zookeeper.jute.h	/^    int32_t numChildren;$/;"	m	struct:Stat
oa_default	recordio.c	/^static struct oarchive oa_default = { STRUCT_INITIALIZER (start_record , oa_start_record),$/;"	v	typeref:struct:oarchive	file:
oa_end_record	recordio.c	/^int oa_end_record(struct oarchive *oa, const char *tag)$/;"	f
oa_end_vector	recordio.c	/^int oa_end_vector(struct oarchive *oa, const char *tag)$/;"	f
oa_serialize_bool	recordio.c	/^int oa_serialize_bool(struct oarchive *oa, const char *name, const int32_t *i)$/;"	f
oa_serialize_buffer	recordio.c	/^int oa_serialize_buffer(struct oarchive *oa, const char *name,$/;"	f
oa_serialize_int	recordio.c	/^int oa_serialize_int(struct oarchive *oa, const char *tag, const int32_t *d)$/;"	f
oa_serialize_long	recordio.c	/^int oa_serialize_long(struct oarchive *oa, const char *tag, const int64_t *d)$/;"	f
oa_serialize_string	recordio.c	/^int oa_serialize_string(struct oarchive *oa, const char *name, char **s)$/;"	f
oa_start_record	recordio.c	/^int oa_start_record(struct oarchive *oa, const char *tag)$/;"	f
oa_start_vector	recordio.c	/^int oa_start_vector(struct oarchive *oa, const char *tag, const int32_t *count)$/;"	f
oarchive	recordio.h	/^struct oarchive {$/;"	s
off	recordio.c	/^    int32_t off;$/;"	m	struct:buff_struct	file:
parentCVersion	zookeeper.jute.h	/^    int32_t parentCVersion;$/;"	m	struct:CreateTxn
passwd	zkclient.h	/^    struct buffer passwd;$/;"	m	struct:_zk_client	typeref:struct:_zk_client::buffer
passwd	zookeeper.jute.h	/^    struct buffer passwd;$/;"	m	struct:ConnectRequest	typeref:struct:ConnectRequest::buffer
passwd	zookeeper.jute.h	/^    struct buffer passwd;$/;"	m	struct:ConnectResponse	typeref:struct:ConnectResponse::buffer
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:CheckVersionRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:CheckVersionTxn
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:CreateRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:CreateResponse
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:CreateTxn
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:CreateTxnV0
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:DeleteRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:DeleteTxn
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:ExistsRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:GetACLRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:GetChildren2Request
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:GetChildrenRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:GetDataRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:GetMaxChildrenRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SetACLRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SetACLTxn
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SetDataRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SetDataTxn
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SetMaxChildrenRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SetMaxChildrenTxn
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SyncRequest
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:SyncResponse
path	zookeeper.jute.h	/^    char * path;$/;"	m	struct:WatcherEvent
perms	zookeeper.jute.h	/^    int32_t perms;$/;"	m	struct:ACL
port	zkclient.h	/^    int port;$/;"	m	struct:_zk_client
priv	recordio.h	/^    void *priv;$/;"	m	struct:iarchive
priv	recordio.h	/^    void *priv;$/;"	m	struct:oarchive
protocolVersion	zookeeper.jute.h	/^    int32_t protocolVersion;$/;"	m	struct:ConnectRequest
protocolVersion	zookeeper.jute.h	/^    int32_t protocolVersion;$/;"	m	struct:ConnectResponse
protocolVersion	zookeeper.jute.h	/^    int32_t protocolVersion;$/;"	m	struct:LearnerInfo
pzxid	zookeeper.jute.h	/^    int64_t pzxid;$/;"	m	struct:Stat
pzxid	zookeeper.jute.h	/^    int64_t pzxid;$/;"	m	struct:StatPersisted
read_socket	request.c	/^static int read_socket(int fd, char *buf, int len) {$/;"	f	file:
read_timeout	zkclient.h	/^    int read_timeout;$/;"	m	struct:_zk_client
recv_response	request.c	/^struct iarchive *recv_response(zk_client *c) {$/;"	f
relativeZxid	zookeeper.jute.h	/^    int64_t relativeZxid;$/;"	m	struct:SetWatches
resize_buffer	recordio.c	/^static int resize_buffer(struct buff_struct *s, int newlen)$/;"	f	file:
scheme	zookeeper.jute.h	/^    char * scheme;$/;"	m	struct:AuthPacket
scheme	zookeeper.jute.h	/^    char * scheme;$/;"	m	struct:Id
send_request	request.c	/^static int send_request(zk_client *c, struct oarchive *oa) {$/;"	f	file:
serialize_ACL	zookeeper.jute.c	/^int serialize_ACL(struct oarchive *out, const char *tag, struct ACL *v){$/;"	f
serialize_ACL_vector	zookeeper.jute.c	/^int serialize_ACL_vector(struct oarchive *out, const char *tag, struct ACL_vector *v)$/;"	f
serialize_AuthPacket	zookeeper.jute.c	/^int serialize_AuthPacket(struct oarchive *out, const char *tag, struct AuthPacket *v){$/;"	f
serialize_Bool	recordio.h	/^    int (*serialize_Bool)(struct oarchive *oa, const char *name, const int32_t *);$/;"	m	struct:oarchive
serialize_Buffer	recordio.h	/^    int (*serialize_Buffer)(struct oarchive *oa, const char *name,$/;"	m	struct:oarchive
serialize_CheckVersionRequest	zookeeper.jute.c	/^int serialize_CheckVersionRequest(struct oarchive *out, const char *tag, struct CheckVersionRequest *v){$/;"	f
serialize_CheckVersionTxn	zookeeper.jute.c	/^int serialize_CheckVersionTxn(struct oarchive *out, const char *tag, struct CheckVersionTxn *v){$/;"	f
serialize_ConnectRequest	zookeeper.jute.c	/^int serialize_ConnectRequest(struct oarchive *out, const char *tag, struct ConnectRequest *v){$/;"	f
serialize_ConnectResponse	zookeeper.jute.c	/^int serialize_ConnectResponse(struct oarchive *out, const char *tag, struct ConnectResponse *v){$/;"	f
serialize_CreateRequest	zookeeper.jute.c	/^int serialize_CreateRequest(struct oarchive *out, const char *tag, struct CreateRequest *v){$/;"	f
serialize_CreateResponse	zookeeper.jute.c	/^int serialize_CreateResponse(struct oarchive *out, const char *tag, struct CreateResponse *v){$/;"	f
serialize_CreateSessionTxn	zookeeper.jute.c	/^int serialize_CreateSessionTxn(struct oarchive *out, const char *tag, struct CreateSessionTxn *v){$/;"	f
serialize_CreateTxn	zookeeper.jute.c	/^int serialize_CreateTxn(struct oarchive *out, const char *tag, struct CreateTxn *v){$/;"	f
serialize_CreateTxnV0	zookeeper.jute.c	/^int serialize_CreateTxnV0(struct oarchive *out, const char *tag, struct CreateTxnV0 *v){$/;"	f
serialize_DeleteRequest	zookeeper.jute.c	/^int serialize_DeleteRequest(struct oarchive *out, const char *tag, struct DeleteRequest *v){$/;"	f
serialize_DeleteTxn	zookeeper.jute.c	/^int serialize_DeleteTxn(struct oarchive *out, const char *tag, struct DeleteTxn *v){$/;"	f
serialize_ErrorResponse	zookeeper.jute.c	/^int serialize_ErrorResponse(struct oarchive *out, const char *tag, struct ErrorResponse *v){$/;"	f
serialize_ErrorTxn	zookeeper.jute.c	/^int serialize_ErrorTxn(struct oarchive *out, const char *tag, struct ErrorTxn *v){$/;"	f
serialize_ExistsRequest	zookeeper.jute.c	/^int serialize_ExistsRequest(struct oarchive *out, const char *tag, struct ExistsRequest *v){$/;"	f
serialize_ExistsResponse	zookeeper.jute.c	/^int serialize_ExistsResponse(struct oarchive *out, const char *tag, struct ExistsResponse *v){$/;"	f
serialize_FileHeader	zookeeper.jute.c	/^int serialize_FileHeader(struct oarchive *out, const char *tag, struct FileHeader *v){$/;"	f
serialize_GetACLRequest	zookeeper.jute.c	/^int serialize_GetACLRequest(struct oarchive *out, const char *tag, struct GetACLRequest *v){$/;"	f
serialize_GetACLResponse	zookeeper.jute.c	/^int serialize_GetACLResponse(struct oarchive *out, const char *tag, struct GetACLResponse *v){$/;"	f
serialize_GetChildren2Request	zookeeper.jute.c	/^int serialize_GetChildren2Request(struct oarchive *out, const char *tag, struct GetChildren2Request *v){$/;"	f
serialize_GetChildren2Response	zookeeper.jute.c	/^int serialize_GetChildren2Response(struct oarchive *out, const char *tag, struct GetChildren2Response *v){$/;"	f
serialize_GetChildrenRequest	zookeeper.jute.c	/^int serialize_GetChildrenRequest(struct oarchive *out, const char *tag, struct GetChildrenRequest *v){$/;"	f
serialize_GetChildrenResponse	zookeeper.jute.c	/^int serialize_GetChildrenResponse(struct oarchive *out, const char *tag, struct GetChildrenResponse *v){$/;"	f
serialize_GetDataRequest	zookeeper.jute.c	/^int serialize_GetDataRequest(struct oarchive *out, const char *tag, struct GetDataRequest *v){$/;"	f
serialize_GetDataResponse	zookeeper.jute.c	/^int serialize_GetDataResponse(struct oarchive *out, const char *tag, struct GetDataResponse *v){$/;"	f
serialize_GetMaxChildrenRequest	zookeeper.jute.c	/^int serialize_GetMaxChildrenRequest(struct oarchive *out, const char *tag, struct GetMaxChildrenRequest *v){$/;"	f
serialize_GetMaxChildrenResponse	zookeeper.jute.c	/^int serialize_GetMaxChildrenResponse(struct oarchive *out, const char *tag, struct GetMaxChildrenResponse *v){$/;"	f
serialize_GetSASLRequest	zookeeper.jute.c	/^int serialize_GetSASLRequest(struct oarchive *out, const char *tag, struct GetSASLRequest *v){$/;"	f
serialize_Id	zookeeper.jute.c	/^int serialize_Id(struct oarchive *out, const char *tag, struct Id *v){$/;"	f
serialize_Id_vector	zookeeper.jute.c	/^int serialize_Id_vector(struct oarchive *out, const char *tag, struct Id_vector *v)$/;"	f
serialize_Int	recordio.h	/^    int (*serialize_Int)(struct oarchive *oa, const char *name, const int32_t *);$/;"	m	struct:oarchive
serialize_LearnerInfo	zookeeper.jute.c	/^int serialize_LearnerInfo(struct oarchive *out, const char *tag, struct LearnerInfo *v){$/;"	f
serialize_Long	recordio.h	/^    int (*serialize_Long)(struct oarchive *oa, const char *name,$/;"	m	struct:oarchive
serialize_MultiHeader	zookeeper.jute.c	/^int serialize_MultiHeader(struct oarchive *out, const char *tag, struct MultiHeader *v){$/;"	f
serialize_MultiTxn	zookeeper.jute.c	/^int serialize_MultiTxn(struct oarchive *out, const char *tag, struct MultiTxn *v){$/;"	f
serialize_QuorumPacket	zookeeper.jute.c	/^int serialize_QuorumPacket(struct oarchive *out, const char *tag, struct QuorumPacket *v){$/;"	f
serialize_ReplyHeader	zookeeper.jute.c	/^int serialize_ReplyHeader(struct oarchive *out, const char *tag, struct ReplyHeader *v){$/;"	f
serialize_RequestHeader	zookeeper.jute.c	/^int serialize_RequestHeader(struct oarchive *out, const char *tag, struct RequestHeader *v){$/;"	f
serialize_SetACLRequest	zookeeper.jute.c	/^int serialize_SetACLRequest(struct oarchive *out, const char *tag, struct SetACLRequest *v){$/;"	f
serialize_SetACLResponse	zookeeper.jute.c	/^int serialize_SetACLResponse(struct oarchive *out, const char *tag, struct SetACLResponse *v){$/;"	f
serialize_SetACLTxn	zookeeper.jute.c	/^int serialize_SetACLTxn(struct oarchive *out, const char *tag, struct SetACLTxn *v){$/;"	f
serialize_SetDataRequest	zookeeper.jute.c	/^int serialize_SetDataRequest(struct oarchive *out, const char *tag, struct SetDataRequest *v){$/;"	f
serialize_SetDataResponse	zookeeper.jute.c	/^int serialize_SetDataResponse(struct oarchive *out, const char *tag, struct SetDataResponse *v){$/;"	f
serialize_SetDataTxn	zookeeper.jute.c	/^int serialize_SetDataTxn(struct oarchive *out, const char *tag, struct SetDataTxn *v){$/;"	f
serialize_SetMaxChildrenRequest	zookeeper.jute.c	/^int serialize_SetMaxChildrenRequest(struct oarchive *out, const char *tag, struct SetMaxChildrenRequest *v){$/;"	f
serialize_SetMaxChildrenTxn	zookeeper.jute.c	/^int serialize_SetMaxChildrenTxn(struct oarchive *out, const char *tag, struct SetMaxChildrenTxn *v){$/;"	f
serialize_SetSASLRequest	zookeeper.jute.c	/^int serialize_SetSASLRequest(struct oarchive *out, const char *tag, struct SetSASLRequest *v){$/;"	f
serialize_SetSASLResponse	zookeeper.jute.c	/^int serialize_SetSASLResponse(struct oarchive *out, const char *tag, struct SetSASLResponse *v){$/;"	f
serialize_SetWatches	zookeeper.jute.c	/^int serialize_SetWatches(struct oarchive *out, const char *tag, struct SetWatches *v){$/;"	f
serialize_Stat	zookeeper.jute.c	/^int serialize_Stat(struct oarchive *out, const char *tag, struct Stat *v){$/;"	f
serialize_StatPersisted	zookeeper.jute.c	/^int serialize_StatPersisted(struct oarchive *out, const char *tag, struct StatPersisted *v){$/;"	f
serialize_StatPersistedV1	zookeeper.jute.c	/^int serialize_StatPersistedV1(struct oarchive *out, const char *tag, struct StatPersistedV1 *v){$/;"	f
serialize_String	recordio.h	/^    int (*serialize_String)(struct oarchive *oa, const char *name, char **);$/;"	m	struct:oarchive
serialize_String_vector	zookeeper.jute.c	/^int serialize_String_vector(struct oarchive *out, const char *tag, struct String_vector *v)$/;"	f
serialize_SyncRequest	zookeeper.jute.c	/^int serialize_SyncRequest(struct oarchive *out, const char *tag, struct SyncRequest *v){$/;"	f
serialize_SyncResponse	zookeeper.jute.c	/^int serialize_SyncResponse(struct oarchive *out, const char *tag, struct SyncResponse *v){$/;"	f
serialize_Txn	zookeeper.jute.c	/^int serialize_Txn(struct oarchive *out, const char *tag, struct Txn *v){$/;"	f
serialize_TxnHeader	zookeeper.jute.c	/^int serialize_TxnHeader(struct oarchive *out, const char *tag, struct TxnHeader *v){$/;"	f
serialize_Txn_vector	zookeeper.jute.c	/^int serialize_Txn_vector(struct oarchive *out, const char *tag, struct Txn_vector *v)$/;"	f
serialize_WatcherEvent	zookeeper.jute.c	/^int serialize_WatcherEvent(struct oarchive *out, const char *tag, struct WatcherEvent *v){$/;"	f
serverid	zookeeper.jute.h	/^    int64_t serverid;$/;"	m	struct:LearnerInfo
sessionId	zookeeper.jute.h	/^    int64_t sessionId;$/;"	m	struct:ConnectRequest
sessionId	zookeeper.jute.h	/^    int64_t sessionId;$/;"	m	struct:ConnectResponse
session_id	zkclient.h	/^    int session_id;$/;"	m	struct:_zk_client
session_timeout	zkclient.h	/^    int session_timeout;$/;"	m	struct:_zk_client
set_sock	conn.c	/^static int set_sock(int fd, int flag) {$/;"	f	file:
set_socket_nodelay	conn.c	/^static int set_socket_nodelay(int fd) {$/;"	f	file:
sock	zkclient.h	/^    int sock;$/;"	m	struct:_zk_client
start_ping_thread	zkclient.c	/^void start_ping_thread(zk_client *c) {$/;"	f
start_record	recordio.h	/^    int (*start_record)(struct iarchive *ia, const char *tag);$/;"	m	struct:iarchive
start_record	recordio.h	/^    int (*start_record)(struct oarchive *oa, const char *tag);$/;"	m	struct:oarchive
start_vector	recordio.h	/^    int (*start_vector)(struct iarchive *ia, const char *tag, int32_t *count);$/;"	m	struct:iarchive
start_vector	recordio.h	/^    int (*start_vector)(struct oarchive *oa, const char *tag, const int32_t *count);$/;"	m	struct:oarchive
stat	zookeeper.jute.h	/^    struct Stat stat;$/;"	m	struct:ExistsResponse	typeref:struct:ExistsResponse::Stat
stat	zookeeper.jute.h	/^    struct Stat stat;$/;"	m	struct:GetACLResponse	typeref:struct:GetACLResponse::Stat
stat	zookeeper.jute.h	/^    struct Stat stat;$/;"	m	struct:GetChildren2Response	typeref:struct:GetChildren2Response::Stat
stat	zookeeper.jute.h	/^    struct Stat stat;$/;"	m	struct:GetDataResponse	typeref:struct:GetDataResponse::Stat
stat	zookeeper.jute.h	/^    struct Stat stat;$/;"	m	struct:SetACLResponse	typeref:struct:SetACLResponse::Stat
stat	zookeeper.jute.h	/^    struct Stat stat;$/;"	m	struct:SetDataResponse	typeref:struct:SetDataResponse::Stat
state	zkclient.h	/^    int state;$/;"	m	struct:_zk_client
state	zookeeper.jute.h	/^    int32_t state;$/;"	m	struct:WatcherEvent
time	zookeeper.jute.h	/^    int64_t time;$/;"	m	struct:TxnHeader
timeOut	zookeeper.jute.h	/^    int32_t timeOut;$/;"	m	struct:ConnectRequest
timeOut	zookeeper.jute.h	/^    int32_t timeOut;$/;"	m	struct:ConnectResponse
timeOut	zookeeper.jute.h	/^    int32_t timeOut;$/;"	m	struct:CreateSessionTxn
token	zookeeper.jute.h	/^    struct buffer token;$/;"	m	struct:GetSASLRequest	typeref:struct:GetSASLRequest::buffer
token	zookeeper.jute.h	/^    struct buffer token;$/;"	m	struct:SetSASLRequest	typeref:struct:SetSASLRequest::buffer
token	zookeeper.jute.h	/^    struct buffer token;$/;"	m	struct:SetSASLResponse	typeref:struct:SetSASLResponse::buffer
txns	zookeeper.jute.h	/^    struct Txn_vector txns;$/;"	m	struct:MultiTxn	typeref:struct:MultiTxn::Txn_vector
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:AuthPacket
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:MultiHeader
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:QuorumPacket
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:RequestHeader
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:Txn
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:TxnHeader
type	zookeeper.jute.h	/^    int32_t type;$/;"	m	struct:WatcherEvent
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:CheckVersionRequest
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:CheckVersionTxn
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:DeleteRequest
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:FileHeader
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:SetACLRequest
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:SetACLTxn
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:SetDataRequest
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:SetDataTxn
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:Stat
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:StatPersisted
version	zookeeper.jute.h	/^    int32_t version;$/;"	m	struct:StatPersistedV1
watch	zookeeper.jute.h	/^    int32_t watch;$/;"	m	struct:ExistsRequest
watch	zookeeper.jute.h	/^    int32_t watch;$/;"	m	struct:GetChildren2Request
watch	zookeeper.jute.h	/^    int32_t watch;$/;"	m	struct:GetChildrenRequest
watch	zookeeper.jute.h	/^    int32_t watch;$/;"	m	struct:GetDataRequest
write_timeout	zkclient.h	/^    int write_timeout;$/;"	m	struct:_zk_client
xid	zookeeper.jute.h	/^    int32_t xid;$/;"	m	struct:ReplyHeader
xid	zookeeper.jute.h	/^    int32_t xid;$/;"	m	struct:RequestHeader
zk_client	zkclient.h	/^typedef struct _zk_client zk_client;$/;"	t	typeref:struct:_zk_client
zk_close	request.c	/^int zk_close(zk_client *c) {$/;"	f
zk_create	request.c	/^int zk_create(zk_client *c, char *path, char *data, int size, int flags) {$/;"	f
zk_del	request.c	/^int zk_del(zk_client *c, char *path) {$/;"	f
zk_exists	request.c	/^int zk_exists(zk_client *c, char *path, struct Stat *stat) {$/;"	f
zk_get	request.c	/^int zk_get(zk_client *c, char *path,  struct buffer *data) {$/;"	f
zk_get_children	request.c	/^int zk_get_children(zk_client *c, char *path, struct String_vector *children) {$/;"	f
zk_ping	request.c	/^int zk_ping(zk_client *c) {$/;"	f
zk_set	request.c	/^int zk_set(zk_client *c, char *path, struct buffer *data) {$/;"	f
zk_stat	request.c	/^int zk_stat(zk_client *c, char *path, struct Stat *stat) {$/;"	f
zxid	zookeeper.jute.h	/^    int64_t zxid;$/;"	m	struct:QuorumPacket
zxid	zookeeper.jute.h	/^    int64_t zxid;$/;"	m	struct:ReplyHeader
zxid	zookeeper.jute.h	/^    int64_t zxid;$/;"	m	struct:TxnHeader
